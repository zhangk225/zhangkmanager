<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
            http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">
	<context:annotation-config />
	<context:component-scan base-package="com.zhangkssh.frame,com.zhangkssh.plugins" />
	<task:annotation-driven executor="myexecutor" scheduler="myscheduler"/>
    <task:executor id="myexecutor" pool-size="5"/>
    <task:scheduler id="myscheduler" pool-size="10"/>
	<aop:aspectj-autoproxy />

	<bean id="configurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<value>classpath:jdbc.properties</value>
		</property>
	</bean>

	<bean id="zhangkDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${zhangk.driverClass}"></property>
		<property name="jdbcUrl" value="${zhangk.jdbcUrl}"></property>
		<property name="user" value="${zhangk.user}"></property>
		<property name="password" value="${zhangk.password}"></property>

		<property name="maxPoolSize" value="${jdbc.maxPoolSize}"></property>
		<property name="initialPoolSize" value="${jdbc.initialPoolSize}"></property>
		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}"></property>
		<property name="preferredTestQuery" value="SELECT 1"></property>
		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="${jdbc.maxIdleTime}"></property>
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="${jdbc.acquireIncrement}" />
	</bean>

	<bean id="zhangk1Source"
		class="org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy">
		<property name="targetDataSource">
			<ref local="zhangkDataSource" />
		</property>
	</bean>

	<bean id="zhangkSessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource">
			<ref bean="zhangk1Source" />
		</property>

		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
				<prop key="hibernate.connection.autocommit">${hibernate.autocommit}</prop>
				<!-- 使用二级缓存和查询缓存，提高性能 -->
				<prop key="hibernate.cache.use_query_cache">${hibernate.use_query_cache}</prop>
				<prop key="hibernate.cache.provider_class">
					${hibernate.provider_class}
				</prop>
				<prop key="hibernate.cache.provider_configuration_file_resource_path">
					${hibernate.provider_configuration_file_resource_path}
				</prop>
			</props>
		</property>

		<property name="packagesToScan" value="${zhangk.packagesToScan}" />
	</bean>

	<bean id="zhangkTransactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory">
			<ref local="zhangkSessionFactory" />
		</property>
	</bean>

	<tx:annotation-driven proxy-target-class="true"
		transaction-manager="zhangkTransactionManager" />



	<!-- 该 BeanPostProcessor 将自动对标注 @Autowired 的 Bean 进行注入 -->
	<bean
		class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" />
</beans>